name: "Terraform Doc"

on:
  pull_request:

env:
  GITHUB_OWNER: ${{ vars.GH_ORG }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  TF_WORKSPACE: happypathway
  TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
  
jobs:
  tf-doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        id: checkout
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: ${{ vars.terraform_version }}
          cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
          cli_config_credentials_hostname: ${{ vars.terraform_api }}
          
      - name: terraform init
        run: terraform init -upgrade
      - name: Render terraform docs inside the README.md and push changes back to PR branch
        uses: terraform-docs/gh-actions@v1.2.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          working-dir: .
          output-file: README.md
          output-method: inject

      # terraform-docs/gh-actions@v1.0.0 modifies .git files with owner root:root, and the following steps fail with
      # insufficient permission for adding an object to repository database .git/objects
      # since the expected user is runner:docker. See https://github.com/terraform-docs/gh-actions/issues/90
      - name: Fix .git owner
        run: sudo chown runner:docker -R .git

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && env.auto_format != 'true'
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Test \`${{ steps.test.outcome }}\`
            <details><summary>Test Output</summary>
      
            \`\`\`\n
            ${{ steps.test.outputs.stdout }}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
